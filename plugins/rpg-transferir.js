async function handler(m, { conn, args, usedPrefix, command }) {

  let who;
  if (m.isGroup) {
    who = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : false;
  } else {
    who = m.chat;
  }

  if (!who) {
    return m.reply(`${emoji} ·•±ùóç—ñùóä·•ô·•±ùóç·•≤ ·•Ü r·•±s‚ç¥·•Ü·•í·É´·•± ·•≤·•£ m·•±·•ís·•≤»∑·•± ·É´·•±·•£ ·•ôs·•ô·•≤r—ñ·•Ü ·•≤·•£ ùóä·•ô·•± ùóä·•ô—ñ·•±r·•±s ùóçr·•≤·•ísùñø·•±r—ñr.`);
  }

  const amountText = args.find(arg => !arg.startsWith('@') && isNumber(arg));
  if (!amountText) {
      return m.reply(`(‡πë‚Ä¢Ãå . ‚Ä¢Ãë‡πë)ÀÄÃ£ÀÄÃ£  ·É´·•±·ë≤·•±s ·•±s‚ç¥·•±·•¥—ñùñø—ñ·•¥·•≤r ·•£·•≤ ·•¥·•≤·•íùóç—ñ·É´·•≤·É´ ·É´·•± ${m.moneda} ùóä·•ô·•± ùóä·•ô—ñ·•±r·•±s transferir.\n> *·•±»∑·•±m‚ç¥·•£·•Ü:* ${usedPrefix + command} 1000 @usuario`);
  }

  const count = Math.min(Number.MAX_SAFE_INTEGER, Math.max(1, parseInt(amountText)));
  const user = global.db.data.users[m.sender];
  const type = 'coin';
  const bankType = 'bank';

  if (user[bankType] < count) {
    return m.reply(`‚ö†Ô∏è ·•í·•Ü ùóç—ñ·•±·•í·•±s s·•ôùñø—ñ·•¥—ñ·•±·•íùóç·•±s ${m.moneda} ·•±·•í ·•±·•£ ·ë≤·•≤·•í·•¥·•Ü ‚ç¥·•≤r·•≤ r·•±·•≤·•£—ñz·•≤r ·•£·•≤ transferenci·•≤.`);
  }
  
  if (!(who in global.db.data.users)) {
    return m.reply(`‚ùå ·•±·•£ ·•ôs·•ô·•≤r—ñ·•Ü ·•í·•Ü s·•± ·•±·•í·•¥·•ô·•±·•íùóçr·•≤ ·•±·•í m—ñ ·ë≤·•≤s·•± ·É´·•± datos.`);
  }

  if (who === m.sender) {
    return m.reply(`‚ùå ·•í·•Ü ‚ç¥·•ô·•±·É´·•±s ùóçr·•≤·•ísùñø·•±r—ñrùóç·•± ·É´—ñ·•í·•±r·•Ü ·•≤ ùóç—ñ m—ñsm·•Ü.`);
  }

  user[bankType] -= count;
  global.db.data.users[who][type] += count;

  const mentionText = `@${who.split('@')[0]}`;
  
  m.reply(`‚úÖ ¬°ùóçr·•≤·•ísùñø·•±r·•±·•í·•¥—ñ·•≤ ·•±·•ä—ñùóç·•Üs·•≤!\n\n‚Ä∫ “ª·•≤s ·•±·•í·•é—ñ·•≤·É´·•Ü *${count.toLocaleString()} ${m.moneda}* ·•≤ ${mentionText}.\n‚Ä∫ ùóç·•± ùóä·•ô·•±·É´·•≤·•í *${user[bankType].toLocaleString()} ${m.moneda}* en el banco.`, null, { mentions: [who] });
}

handler.help = ['pay <cantidad> @usuario'];
handler.tags = ['rpg'];
handler.command = ['pay', 'transfer'];
handler.group = true;
handler.register = true;

export default handler;

function isNumber(x) {
  if (typeof x === 'string') {
    x = x.trim();
  }
  return !isNaN(x) && x !== '';
}